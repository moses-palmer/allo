use crate::db::values::{Timestamp, UID, URL};

entity!(
    /// A description of a request.
    pub struct Request in Requests {
        /// The unique identifier.
        ///
        /// We want these to be generated by the database, so we use a plain
        /// integer.
        uid: i64,

        /// The user making the request.
        user_uid: UID,

        /// A short name.
        name: String,

        /// A description.
        description: String,

        /// The amount.
        amount: i64,

        /// A relevant URL.
        url: Option<URL>,

        /// The timestamp of this request.
        time: Timestamp,
    }
);

entity_tests! {
    Request[i64 = i64::default()] {
        entity: |id| Request {
            uid: id,
            user_uid: UID::new(),
            name: "name".into(),
            description: "description".into(),
            amount: 42,
            url: None,
            time: Timestamp::now(),
        };
        modify: |e| Request {
            description: "another description".into(),
            ..e
        };
        prepare: |c, e| {
            let u = crate::db::entities::user::tests::entity_with_id(
                e.user_uid().clone(),
            );
            crate::db::entities::user::tests::prepare(c, &u).await?;
            u.create(c).await
        };
    }
}
